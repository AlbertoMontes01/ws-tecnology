<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <style>
      /* CSS for fade-in animation */
      
    </style>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100&family=Roboto:wght@100;300;400&display=swap" rel="stylesheet">
  </head>
  <body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark navBar container-fluid">
      <h1 class="textXd navTitle"><%= title %></h1>
    </nav>
    <!--<h1><%= title %></h1>
    <p class="textXd">Temperature: <span id="temperature" ></span></p>
<p class="textXd">Humidity: <span id="humidity"></span></p>
<p class="textXd">AirQuality: <span id="airquality"></span></p>-->
<br>
<div class="card mb-3 CustomePadding" style="max-width: 300px;">
  <div class="row g-0 align-items-center">
    <div class="col-md-4">
      <svg xmlns="http://www.w3.org/2000/svg" width="46" height="46" fill="currentColor" class="bi bi-thermometer-half" viewBox="0 0 16 16">
        <path d="M9.5 12.5a1.5 1.5 0 1 1-2-1.415V6.5a.5.5 0 0 1 1 0v4.585a1.5 1.5 0 0 1 1 1.415z" fill="red" stroke="red"/>
        <path d="M5.5 2.5a2.5 2.5 0 0 1 5 0v7.55a3.5 3.5 0 1 1-5 0V2.5zM8 1a1.5 1.5 0 0 0-1.5 1.5v7.987l-.167.15a2.5 2.5 0 1 0 3.333 0l-.166-.15V2.5A1.5 1.5 0 0 0 8 1z"/>
      </svg>
    </div>
    <div class="col-md-8 row g-0 align-items-center">
      <div class="card-body">
        <h5 class="card-title" style="margin-bottom: 0;">Temperature</h5>
        <p class="card-text" id="temperature"></p>
        <!--<p class="card-text"><small class="text-muted">Last updated 3 mins ago</small></p>-->
      </div>
    </div>
  </div>
</div>


</div>
    <canvas id="myChart" class="CustomePadding"></canvas>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
    <script>
      const ws = new WebSocket("ws://192.168.0.12:3000/websocket");

      var ctx = document.getElementById("myChart").getContext("2d");
      var myChart = new Chart( ctx, {
        type: 'bar',
        data: {
          labels: [ 'Temperature'],
          datasets: [{
            label: 'Atmospher managment',
            data: [0]//temperature, humidity]
            ,
            backgroundColor: ['red', 'rgb(0,51,102)'] 
          }]
        },
        options: {
          scales: {
            yAxes: [{
              ticks: {
                beginAtZero: true
              }
            }]
          }
        }
      })
      /*
      var ctx = document.getElementById("myChart").getContext("2d");
      var myChart = new Chart( ctx, {
        type: 'bar',
        data: {
          labels: [ 'Temperature', 'Humidity', 'airquality'],
          datasets: [{
            label: 'Atmospher managment',
            data: [0,0,0]//temperature, humidity]
            ,
            backgroundColor: ['red', 'rgb(0,51,102)'] 
          }]
        }
      })*/


ws.addEventListener("open", () => {
  console.log("WebSocket connection established");

  /*ws.send(JSON.stringify({
    Temperature: 100,
    Humidity:200
  }));*/
});

ws.addEventListener("message", ({ data }) => {
  console.log(`Received message: ${data}`);
  console.log('yes Message get into the eventlistener')
  try{
    
        // update data
        const { temperature, humidity, airquality } = JSON.parse(data);

        //document.getElementById("temperature").innerText = temperature;
        //document.getElementById("humidity").innerText = humidity;
        var lol = document.getElementById("xdd");
        // Smoothly update the values over time with fade-in effect
        const temperatureElement = document.getElementById("temperature");
        temperatureElement.innerText = temperature;
          const humidityElement = document.getElementById("humidity");
          humidityElement.innerText = humidity;
          const airqualityElement = document.getElementById("airquality");
          airqualityElement.innerText = airquality;
        /*var ctx = document.getElementById("myChart").getContext("2d");
        var myChart = new Chart( ctx, { 
        type: 'bar',
        data: {
          labels: [ 'Temperature', 'Humidity'],
          datasets: [{
            label: 'Atmospher Managment',
            data: [temperature, humidity]
          }]
        },
        options: {
          scales: {
            yAxes: [{
              ticks: {
                beginAtZero: true
              }
            }]
          }
        }
      })*/
      const startTemperature = parseFloat(temperatureElement.innerText);
          const startHumidity = parseFloat(humidityElement.innerText);
          const startAirquality = parseFloat(airqualityElement.innerText);
          const endTemperature = parseFloat(temperature);
          const endHumidity = parseFloat(humidity);
          const endAirquality = parseFloat(airquality);
          const duration = 1000; // Animation duration in milliseconds
          const startTime = performance.now();

          function animateValues(timestamp) {
            const elapsed = timestamp - startTime;
            const progress = Math.min(elapsed / duration, 1);

            const currentTemperature = startTemperature + (endTemperature - startTemperature) * progress;
            const currentHumidity = startHumidity + (endHumidity - startHumidity) * progress;
            const currentQuality = startAirquality + (endAirquality - startAirquality) * progress;

            temperatureElement.innerText = currentTemperature.toFixed(2);
            humidityElement.innerText = currentHumidity.toFixed(2);
            airqualityElement.innerText = currentQuality.toFixed(2);

            if (progress < 1) {
              requestAnimationFrame(animateValues);
            } else {
              temperatureElement.classList.add("show");
              humidityElement.classList.add("show");
              airqualityElement.classList.add("show");
            }
          }

          requestAnimationFrame(animateValues);

          // Update the chart data
          myChart.data.datasets[0].data = [endTemperature, endHumidity, endAirquality];
          myChart.update();
    } catch(error) {
      console.error("error parsing JSON:", error)
    }
      });
    </script>
  </body>
</html>